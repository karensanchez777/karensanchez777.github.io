[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "karensanchez777.github.io",
    "section": "",
    "text": "First experiment\n\n\n\n\n\nPost description\n\n\n\n\n\n\nMay 21, 2023\n\n\nKaren Sánchez\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 11, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 8, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/image-clasification/quarto-prueba.html",
    "href": "posts/image-clasification/quarto-prueba.html",
    "title": "First experiment",
    "section": "",
    "text": "This is my first experiment trying to blog using a Jupyter Notebook I’ve created in Kaggle.\n\nimport os\niskaggle = os.environ.get('KAGGLE_KERNEL_RUN_TYPE', '')\n\nif iskaggle:\n    !pip install -Uqq fastai duckduckgo_search\n\nERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nydata-profiling 4.1.2 requires requests<2.29,>=2.24.0, but you have requests 2.30.0 which is incompatible.\nlibrosa 0.10.0.post2 requires soundfile>=0.12.1, but you have soundfile 0.11.0 which is incompatible.\nkfp 1.8.20 requires google-api-python-client<2,>=1.7.8, but you have google-api-python-client 2.86.0 which is incompatible.\nkfp 1.8.20 requires PyYAML<6,>=5.3, but you have pyyaml 6.0 which is incompatible.\ngcsfs 2023.3.0 requires fsspec==2023.3.0, but you have fsspec 2023.4.0 which is incompatible.\nbeatrix-jupyterlab 2023.46.184821 requires jupyter-server~=1.16, but you have jupyter-server 2.5.0 which is incompatible.\napache-beam 2.46.0 requires dill<0.3.2,>=0.3.1.1, but you have dill 0.3.6 which is incompatible.\napache-beam 2.46.0 requires pyarrow<10.0.0,>=3.0.0, but you have pyarrow 10.0.1 which is incompatible.\n\n\n\nfrom duckduckgo_search import ddg_images\nfrom fastcore.all import *\n\ndef search_images(term, max_images=10):\n    print(f\"Searching for '{term}'\")\n    return L(ddg_images(term, max_results=max_images)).itemgot('image')\n\n\nfrom fastdownload import download_url\n# Ocupamos el siguiente modulo para abrir las imagenes con `Image.open` usar la clase Path, la función `doc`, etc\nfrom fastai.vision.all import *\n\ndownload_url(search_images('rosa flor', max_images=1)[0], 'rosa.jpg', show_progress=False)\nImage.open('rosa.jpg').to_thumb(256,256)\n\n/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n\n\nSearching for 'rosa flor'\n\n\n/opt/conda/lib/python3.10/site-packages/duckduckgo_search/compat.py:60: UserWarning: ddg_images is deprecated. Use DDGS().images() generator\n  warnings.warn(\"ddg_images is deprecated. Use DDGS().images() generator\")\n/opt/conda/lib/python3.10/site-packages/duckduckgo_search/compat.py:64: UserWarning: parameter page is deprecated\n  warnings.warn(\"parameter page is deprecated\")\n/opt/conda/lib/python3.10/site-packages/duckduckgo_search/compat.py:66: UserWarning: parameter max_results is deprecated\n  warnings.warn(\"parameter max_results is deprecated\")\n\n\n\n\n\n\ndownload_url(search_images('flor de dalia', max_images=1)[0], 'dalia.jpg', show_progress=False)\nImage.open('dalia.jpg').to_thumb(256,256)\n\nSearching for 'flor de dalia'\n\n\n\n\n\n\ndownload_url(search_images('sunflower flower', max_images=1)[0], 'sunflower.jpg', show_progress=False)\nImage.open('sunflower.jpg').to_thumb(256,256)\n\nSearching for 'sunflower flower'\n\n\n\n\n\n\ndownload_url(search_images('pink primrose', max_images=1)[0], 'pink_primrose.jpg', show_progress=False)\nImage.open('pink_primrose.jpg').to_thumb(256,256)\n\nSearching for 'pink primrose'\n\n\n\n\n\n\nsearches = 'sunflower flower','pink primrose flower' # Karen: búsquedas de imagenes tipo Google Images\npath = Path('flowers')\nfrom time import sleep\n\nfor o in searches: # Karen: la 'o' se va a iterar, primero toma la cadena 'forest' y después la cadena 'bird'\n    dest = (path/o)# Karen: ¿qué significa path/o? La direccion donde lo vamos a guardar. El signo '/' no es para una división, sino que es la diagonal utilizada para especificar la direccion de la computadora donde está guardado un archivo.\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'{o}')) \n    sleep(10)  # Pause between searches to avoid over-loading server\n    resize_images(path/o, max_size=400, dest=path/o)\n\nSearching for 'sunflower flower'\nSearching for 'pink primrose flower'\n\n\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n0\n\n\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), #Karen: ImagenBlock=input, CategoryBlock=output\n    get_items=get_image_files, # Karen: los datos de entrenemiento; get_image_files es una función\n    splitter=RandomSplitter(valid_pct=0.2, seed=42), #Karen: separa los datos en un conjunto de entrenamiento y validación\n    get_y=parent_label, #Karen: y es la variable objetivo, este dato lo toma del nombre del folder en que está cada imagen\n    item_tfms=[Resize(192, method='squish')] # Para que todas las imágenes sean del mismo tamaño (solo si para Computer Vision)\n).dataloaders(path, bs=4)\n\ndls.show_batch(max_n=6)\n\n\n\n\n\nlen(dls.train)\n\n3\n\n\n\nlen(dls.valid)\n\n1\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate) #Karen: dls=datos, restnet18= modelo = red neuronal\nlearn.fine_tune(1) #no empezamos desde cero, empezamos de un modelo preentrenado, fastai ajusta los pesos para que el modelo aprenda a reconocer nuestro conjunto de datos\n\n/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\nDownloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n100%|██████████| 44.7M/44.7M [00:00<00:00, 71.0MB/s]\n\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      1.338883\n      0.347549\n      0.333333\n      00:05\n    \n  \n\n\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      0.795316\n      0.193980\n      0.000000\n      00:01\n    \n  \n\n\n\n\nflower_name, index, probs=learn.predict('sunflower.jpg')\nprint(f'It is a {flower_name} with probability {probs[index]:.4f}')\n\n\n\n\n\n\n\n\nIt is a sunflower flower with probability 0.9705\n\n\n\nflower_name, index, probs=learn.predict('pink_primrose.jpg')\nprint(f'It is a {flower_name} with probability {probs[index]:.4f}')\n\n\n\n\n\n\n\n\nIt is a pink primrose flower with probability 0.6853\n\n\n\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninterp.plot_top_losses(3, nrows=2,figsize=(17,4))"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]